package {{api.ns}};

import org.json.*;
import java.util.*;
import org.apache.http.HttpResponse;

// Do not edit, auto generated by api-kit, kanzhun.com.
// {{api.ts}}

public class {{bean.name}} {
    {% for f in bean.fields %}public {{f.type('java')}} {{f.name}}; {% if f.optional %} // optional {% end %}
    {% end %}

    public {{bean.name}}() {
    }

    public {{bean.name}}({% for idx, f in enumerate(bean.requires) %}{{f.type('java')}} {{f.name}}{% if idx < len(bean.requires) - 1 %}, {% end %} {% end %}) {
        {% for f in bean.requires %} this.{{f.name}} = {{f.name}};
        {% end %}
        {% for f in bean.optionals %} {% if f.default('java') is not None %}
        this.{{f.name}} = {{f.default('java')}}; {% end %}
        {% end %}
    }

    public {{bean.name}}(String json) throws JSONException {
        this(new JSONObject(json));
    }

    public JSONObject toJSON() {
        try {
            JSONObject obj = new JSONObject();
     {% for f in bean.fields %}
          {% if f.is_primitive %}
            obj.put("{{f.name}}", this.{{f.name}});
          {% elif f.list %}
            if ({{f.name}} != null) {
            JSONArray {{f.name}}Arr = new JSONArray();
            for ({{f.list_item.type('java')}} v: {{f.name}}) {
            {% if f.list_item.is_primitive %}
                {{f.name}}Arr.put(v);
            {% else %}
                {{f.name}}Arr.put(v.toJSON());
            {% end %}
            }
            obj.put("{{f.name}}", {{f.name}}Arr);
            }
          {% else %}
            if ({{f.name}} != null) {
                obj.put("{{f.name}}", {{f.name}}.toJSON());
            }
          {% end %}
     {% end %}
            return obj;
        } catch (JSONException e) {
            throw new RuntimeException(e);
        }
    }


    public {{bean.name}}(JSONObject m) throws JSONException {
     {% for f in bean.fields %}
          {% if f.is_primitive %}
            this.{{f.name}} = Utils.get{{f.t}}(m, "{{f.name}}");
          {% elif f.list %}
            if (m.has("{{f.name}}")) {
                JSONArray array = m.getJSONArray("{{f.name}}");
                this.{{f.name}} = new ArrayList<{{f.list_item.type('java')}}>(array.length());
                for (int i = 0; i < array.length(); i++) {
                {% if f.list_item.is_primitive %}
                    this.{{f.name}}.add(Utils.arr{{f.list_item.t}}(array, i));
                {% else %}
                    this.{{f.name}}.add(new {{f.list_item.t}}(array.getJSONObject(i)));
                {% end %}
                }
            }
          {% else %}
          if (m.has("{{f.name}}")) {
            this.{{f.name}} = new {{f.t}}(m.getJSONObject("{{f.name}}"));
          }
          {% end %}
     {% end %}
     }
}
