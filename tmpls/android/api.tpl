package {{api.ns}};

import android.app.Activity;

import org.apache.http.*;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.*;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.entity.StringEntity;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.json.*;

import java.io.IOException;
import java.net.URLEncoder;
import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;

// Do not edit, auto generated by api-kit, kanzhun.com.
// {{api.ts}}

public class Api {
    // TODO statistics
    private final Activity context;
    private final HttpClient mClient;
    private final ExecutorService mService;
    private final Config mConfig;

    public static interface IHooker {
        // a chance to modify the request before send on the wire. useful for add custom header, etc
        HttpRequestBase Rewrite(HttpRequestBase request, String fname);

        // useful for logging, etc, handle error on one handler
        void onError(HttpRequestBase request, Exception e);
    }

    public static class Config {
        public final String server;
        public final IHooker hook;
        public final HttpClient client;

        public Config(HttpClient client, String server, IHooker hook) {
            this.server = server;
            this.client = client;
            this.hook = hook;
        }

        public Config(HttpClient client, String host) {
            this.server = host;
            this.client = client;
            this.hook = new IHooker() {
                @Override
                public HttpRequestBase Rewrite(HttpRequestBase req, String fname) {
                    return req;
                }

                @Override
                public void onError(HttpRequestBase req, Exception e) {
                }
            };
        }
    }

    public Api(Activity context, Config conf) {
        this.context = context;
        this.mConfig = conf;
        this.mClient = conf.client;

        final AtomicInteger id = new AtomicInteger(1);
        this.mService = Executors.newCachedThreadPool(new ThreadFactory() {
            @Override
            public Thread newThread(Runnable r) {
                Thread t = new Thread(r, "api-worker-" + id.incrementAndGet());
                t.setDaemon(true);
                return t;
            }
        });
    }

{% for b in api.batches %}
    public static interface {{b.name}}Handler {
        void onResponse(HttpResponse http, {{b.name}}Resp resp, Exception e);
    }

    // BATCH {{b.uri}}
    public Future<{{b.name}}Resp> {{b.name}}({% for f, arg, resp in b.params %}final {{arg.type('java')}} {{arg.name}}, {% end %}final {{b.name}}Handler h) {
        return mService.submit(new Callable<{{b.name}}Resp>() {
            @Override
            public {{b.name}}Resp call() throws Exception {
                HttpPost _r = new HttpPost(mConfig.server + "{{b.uri}}");
                try {
                    String rb = new {{b.name}}Req({% for idx, (f, arg, resp) in enumerate(b.params) %}{{arg.name}}{% if idx < len(b.params) - 1 %}, {% end %}{% end %}).toJSON().toString();
                    _r.setEntity(new StringEntity(rb, "utf8"));
                    HttpResponse resp = mClient.execute(mConfig.hook.Rewrite(_r, "{{b.name}}"));
                    String body = EntityUtils.toString(resp.getEntity());
                    {{b.name}}Resp r;
                    if (resp.getStatusLine().getStatusCode() == 200) {
                        r = new {{b.name}}Resp(body);
                    } else {
                        r = new {{b.name}}Resp();
                    }
                    if (h != null) h.onResponse(resp, r, null);
                    return r;
                } catch (Exception e) {
                    h.onResponse(null, null, e);
                    mConfig.hook.onError(_r, e);
                    throw e;
                }
            }
        });
    }

{% end %}

{% for func in api.funcs %}
    public static interface {{func.name}}Handler {
        void onResponse(HttpResponse http, {{func.ret.type('java')}} resp, Exception e);
    }

    // Async {{func.method}} {{func.uri}}
    public Future<{{func.ret.type('java')}}> {{func.name}}({% for arg in func.params %}final {{arg.type('java')}} {{arg.name}}, {% end %}final {{func.name}}Handler h) {
        return mService.submit(new Callable<{{func.ret.type('java')}}>() {
            @Override
            public {{func.ret.type('java')}} call() throws Exception {
           {% set url, args, qs = func.concat_url('java') %}
        {% if func.method == "POST" %}
                HttpPost _r = new HttpPost(mConfig.server + {{url}});
                List<NameValuePair> pairs = new ArrayList<NameValuePair>();
            {% for name, var in args.items() %}
                {% if "string" in var.t %}
                pairs.add(new BasicNameValuePair("{{name}}", {{var.name}}));
                {% else %}
                pairs.add(new BasicNameValuePair("{{name}}", {{var.name}} + ""));
                {% end %}
            {% end %}
                 _r.setEntity(new UrlEncodedFormEntity(pairs));
        {% else %}
                 String url = {{url}}{{qs}};
                 HttpGet _r = new HttpGet(mConfig.server + url);
        {% end %}

                try {
                    HttpResponse resp = mClient.execute(mConfig.hook.Rewrite(_r, "{{func.name}}"));
                    String body = EntityUtils.toString(resp.getEntity());
                {% if func.ret.bean %}
                    {{func.ret.type('java')}} r;
                    if (body != null && body.length() > 0) {
                        r = new {{func.ret.type('java')}}(body);
                    } else {
                        r = new {{func.ret.type('java')}}();
                    }
                    h.onResponse(resp, r, null);
                    return r;
                {% elif func.ret.list %}
                    JSONArray array = new JSONArray(body);
                    {{func.ret.type('java')}} r = new ArrayList<{{func.ret.list_item.type('java')}}>(array.length());
                    for (int i = 0; i < array.length(); i++) {
                    {% if func.ret.list_item.is_primitive %}
                        r.add(Utils.arr{{func.ret.list_item.t}}(array, i));
                    {% else %}
                        r.add(new {{func.ret.list_item.t}}(array.getJSONObject(i)));
                    {% end %}
                    }
                    if (h != null) h.onResponse(resp, r, null);
                    return r;
                {% else %}
                   return body;
                {% end %}
                } catch (Exception e) {
                    h.onResponse(null, null, e);
                    mConfig.hook.onError(_r, e);
                    throw e;
                }
            }
        });
    }
{% end %}
}
