package {{api.ns}};

import com.google.gson.Gson;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

// Do not edit, auto generated by api-kit, kanzhun.com.
// {{api.ts}}

public class Dispatcher {
    static String getstring(Map<String, String> m, String name) {
        return m.get(name);
    }

    static int geti32(Map<String, String> m, String name) {
        String t = m.get(name);
        if (t != null) {
            return Integer.parseInt(t);
        }
        return 0;
    }

    static long geti64(Map<String, String> m, String name) {
        String t = m.get(name);
        if (t != null) {
            return Long.parseLong(t);
        }
        return 0;
    }

    static float getfloat32(Map<String, String> m, String name) {
        String t = m.get(name);
        if (t != null) {
            return Float.parseFloat(t);
        }
        return 0f;
    }

    static double getfloat64(Map<String, String> m, String name) {
        String t = m.get(name);
        if (t != null) {
            return Double.parseDouble(t);
        }
        return 0;
    }

    static boolean getbool(Map<String, String> m, String name) {
        String t = m.get(name);
        if (t == null || t.equalsIgnoreCase("false") || t.equals("0")) {
            return false;
        }
        return true;
    }

    private static final Gson gson = new Gson();

    static Map<String, String> match(HttpServletRequest req, String method, String uri, String query) {
        if (!method.equals(req.getMethod())) {
            return null;
        }

        Matcher m = null;
        // `:` is special.  /ac/:kind?limit=:limit&offset=:offset
        if (uri.contains(":")) {
            // TODO optimization. use static var to cache the compile
            Pattern regex = Pattern.compile(uri.replaceAll(":(\\w+)", "(.+)"));
            m = regex.matcher(req.getRequestURI());
            if (!m.find()) {
                return null;
            }
        } else if (!req.getRequestURI().startsWith(uri)) {
            return null;
        }

        Map<String, String> map = new HashMap<String, String>();
        Map<String, String[]> m_ = req.getParameterMap();
        for (String s : m_.keySet()) {
            map.put(s, m_.get(s)[0]);  // TODO support array
        }

        if (m != null) { // extract value from url path /ac/:category
            Matcher names = NAME.matcher(uri);
            int idx = 1;
            while (names.find()) {
                map.put(names.group(1), m.group(idx++));
            }
        }

        if (query.contains(":")) { // parameter rename
            m = QUERY.matcher(query);
            while (m.find()) {
                map.put(m.group(2), req.getParameter(m.group(1)));
            }
        }

        return map;
    }

    private static final Pattern NAME = Pattern.compile(":(\\w+)");
    private static final Pattern QUERY = Pattern.compile("(\\w+)=:(\\w+)");

    public static boolean dispatch(HttpServletRequest req, HttpServletResponse resp, IHandler h) throws IOException {
    {% for b in api.batches %}
        if (req.getRequestURI().equals("{{b.uri}}") && req.getMethod().equals("POST")) {
            {{b.name}}Req d = gson.fromJson(new InputStreamReader(req.getInputStream(), "utf8"), {{b.name}}Req.class);
            {{b.name}}Resp r = new {{b.name}}Resp();

        {% for fn, arg, resp in b.params %}
            if (d.{{arg.name}} != {{arg.null('java')}}) {
                Context c = new Context(req, resp, "{{fn.name}}");
                if (h.before(c)) {
                    r.{{resp.name}} = h.{{fn.name}}(c, d.{{arg.name}});
                    h.after(c);
                }
                if (c.code > 0) {
                    resp.setStatus(c.code);
                    resp.getWriter().write(c.message == null ? "": c.message);
                    return true;
                }
            }
        {% end %}
            resp.addHeader("Content-Type", "application/json");
            resp.getWriter().write(gson.toJson(r));
            return true;
        }
    {% end %}
        Map<String, String> params = null;
        {% for func in funcs %}
        if ((params = match(req, "{{func.method}}", "{{func.uri}}", "{{func.query}}")) != null) {
            Context c = new Context(req, resp, "{{func.name}}");
            if (h.before(c)) {
                {{func.ret.type('java')}} r = h.{{func.name}}(c {% for arg in func.params %},{% if arg.is_primitive %} get{{arg.t}}(params, "{{arg.name}}") {% else %} new {{arg.t}}(params){% end %}{% end %});
                if (c.code == 0) {
                    resp.addHeader("Content-Type", "application/json");
                    resp.getWriter().write(gson.toJson(r));
                    h.after(c);
                    return true;
                }
            }
            resp.setStatus(c.code == 0 ? 501: c.code); // 501: Not implemented
            resp.getWriter().write(c.message == null ? "": c.message);
            return true;
        }
        {% end %}

        return false;
    }

}
